@model Assetify.ViewsModels.StatisticsViewModel
@{
    ViewData["Title"] = "Statistics Page";
}

@section Scripts {
    <script src="~/lib/d3.min.js"></script>
    <script>
        const margin = ({ top: 20, right: 0, bottom: 30, left: 40 });
        const width = 500;
        const height = 300;
        const data = @Json.Serialize(Model.dataPoints);

        const yAxis = g => g
            .attr("transform", `translate(${margin.left},0)`)
            .call(d3.axisLeft(y))
            .call(g => g.select(".domain").remove());
        const xAxis = g => g
            .attr("transform", `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(x).tickSizeOuter(0));
        const y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.value)]).nice()
            .range([height - margin.bottom, margin.top]);
        const x = d3.scaleBand()
            .domain(data.map(d => d.name))
            .range([margin.left, width - margin.right])
            .padding(0.1);


        const chartSvg = d3.select("svg.js-statistics-contatiner")
            .attr("viewBox", [0, 0, width, height]);
        const bar = chartSvg.append("g")
            .attr("fill", "steelblue")
            .selectAll("rect")
            .data(data)
            .join("rect")
            .style("mix-blend-mode", "multiply")
            .attr("x", d => x(d.name))
            .attr("y", d => y(d.value))
            .attr("height", d => y(0) - y(d.value))
            .attr("width", x.bandwidth());
        const gx = chartSvg.append("g")
            .call(xAxis);

        const gy = chartSvg.append("g")
            .call(yAxis);


        const chart = Object.assign(chartSvg.node(), {
            update(order) {
                x.domain(data.sort(order).map(d => d.name));

                const t = svg.transition()
                    .duration(750);

                bar.data(data, d => d.name)
                    .order()
                    .transition(t)
                    .delay((d, i) => i * 20)
                    .attr("x", d => x(d.name));

                gx.transition(t)
                    .call(xAxis)
                    .selectAll(".tick")
                    .delay((d, i) => i * 20);
            }
        });
        const order = () => { };
        const update = chart.update(order);

        d3.append()

    </script>
}

<div class="text-center" class="">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about statistics!!!!!!! <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>



<svg class="js-statistics-contatiner">

</svg>